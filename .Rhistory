# Ajouter les colonnes ExpT1, ExpT2, ExpT3 pour un filtrage
DataExpMoy_full <- cbind(MatriceDataExpMoy, ExpT1 = DataBio$ExpT1, ExpT2 = DataBio$ExpT2, ExpT3 = DataBio$ExpT3)
# Moyenne des gènes surexprimés pour T1 à 6 heures
mean_sur_T1_6H <- mean(DataExpMoy_full[DataExpMoy_full$ExpT1 == "Sur", "T1_6H"])
#print(mean_sur_T1_6H)
# On fait la ACP de ce nouveau jeu de données
ACP_DataExpMoy <- PCA(DataExpMoy,  scale.unit = F, graph = F)
ACP_DataExpMoy$eig
g1 = fviz_eig(ACP_DataExpMoy,addlabels = TRUE, ylim = c(0, 100), main = "Valeurs propres")
# Projection des DataExpMoy
g2 = fviz_pca_ind(ACP_DataExpMoy, geom = c("point"),col.ind = "cos2", gradient.cols = c("blue", "red"), repel = TRUE, title = "Projection des DataExpMoy")
grid.arrange(g1, g2, nrow=2)
# Projection des variables
fviz_pca_var(ACP_DataExpMoy, col.var = "contrib",
gradient.cols = c("blue", "red"), repel = TRUE,
title = "Combinaison Traitement/Heure")
# Maintenant que l'ACP a été effectuée, on fait un clustering des classes à l'aide de la méthode K-means.
# Avant de débuter le clustering avec la méthode K-means, il faut déterminer le nombre de classes.
set.seed(123)
Kmax<-15
reskmeanscl<-matrix(0,nrow=nrow(DataExpMoy),ncol=Kmax)
Iintra<-NULL
for (k in 2:Kmax){
resaux<-kmeans(DataExpMoy,centers=k)
reskmeanscl[,k]<-resaux$cluster
Iintra<-c(Iintra,resaux$tot.withinss) # tot.withinss correspond à la somme des composantes au carré des éléments du cluster par cluster
}
df<-data.frame(K=2:15,Iintra=Iintra)
g1 = ggplot(df,aes(x=K,y=Iintra))+
geom_line()+
geom_point()+
xlab("Nombre de classes")+
ylab("Inertie intraclasse")
# Avec cette méthode, on dirait que le coude correspond lorsque le nombre de classes est de 6.
# On va alors utiliser 6 classes pour la méthode des K-means.
ExpMoykmeans<-kmeans(DataExpMoy,centers = 6)
g2 = fviz_cluster(ExpMoykmeans,data=DataExpMoy,ellipse.type="norm",labelsize=8,geom=c("point"))+ggtitle("")
# A présent, on va essayer une autre méthode, la méthode hiérarchique.
# D'une part, on fait le calcul de la matrice de distances
dist_matrix_ExpMoy <- dist(DataExpMoy, method = "euclidean")
# Clustering hiérarchique avec la méthode de liaison "ward.D2", on peut aussi faire avec "single", "complete","average" ...
hc_ExpMoy <- hclust(dist_matrix_ExpMoy, method = "ward.D2")
grid.arrange(g1, g2, nrow=2)
# Afficher le dendrogramme
#fviz_dend(hc_ExpMoy,k=6,show_labels = FALSE, rect = TRUE, rect_fill = TRUE,palette = "npg", rect_border = "npg", labels_track_height = 0.8)+ggtitle("")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,37]))
g1 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT1"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,38]))
g2 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT2"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,39]))
g3 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT3"), expand = c(.05, .05))+
theme(legend.position = "none")
grid.arrange(g1,g2,g3,ncol=3)
#Alluvial Diagram
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 3, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 4, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 6, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 3, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
help("fviz_nbclust")
fviz_nbclust(ExpT, method=c("silhouette"))
fviz_nbclust(ExpT, FUNcluster=pam, method=c("silhouette"))
ExpT_data = data.frame(ExpT)
fviz_nbclust(ExpT_data, FUNcluster=pam, method=c("silhouette"))
ExpT_data = data.frame(ExpT)
fviz_nbclust(x=ExpT_data, FUNcluster=pam, method=c("silhouette"))
ClustExpT = pam(ExpT, 3, metric = c("euclidean"))
ExpT_data = data.frame(ExpT)
fviz_nbclust(x=ExpT, FUNcluster=pam, method=c("silhouette"))
View(ExpT_data)
View(ExpT)
fviz_nbclust(x=ExpT, FUNcluster=pam, method=c("wss"))
fviz_nbclust(x=ExpT, FUNcluster=pam, method=c("gap_stat"))
install.packages("ClustOfVar")
library(ClustOfVar)
help(clustofvar)
??clustofvar
kmeansvar(X.quali = ExpT)
kmeansvar(X.quali = ExpT, rename.level=TRUE)
kmeansvar(X.quanti=DataBioCR, X.quali = ExpT, rename.level=TRUE)
kmeansvar(X.quanti=DataBioCR, X.quali = ExpT)
help(kmeansvar)
kmeansvar(X.quali = ExpT)+rename.level=TRUE
kmeansvar(X.quanti=DataBioCR, X.quali = ExpT)+rename.level=TRUE
kmeansvar(X.quanti=DataBioCR, X.quali = ExpT, rename.level=TRUE)
kmeansvar(X.quanti=DataBioCR, X.quali = ExpT)
kmeansvar(X.quanti=Tt_sH_Rr, X.quali = ExpT)
ExpT_data.rename.level=TRUE
kmeansvar(X.quanti=Tt_sH_Rr, X.quali = ExpT_data)
ExpT_data.rename(level=TRUE)
ExpT_data.rename_level=TRUE
kmeansvar(X.quanti=Tt_sH_Rr, X.quali = ExpT_data)
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
knitr::opts_chunk$set(echo = TRUE)
if(!require(reticulate)) install.packages("reticulate")
library(reticulate)
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("corrplot")) install.packages("corrplot")
library(corrplot)
if (!require("grid")) install.packages("grid")
library(grid)
if (!require("gridExtra")) install.packages("gridExtra")
library(gridExtra)
if (!require("lattice")) install.packages("lattice")
library(lattice)
if (!require("BioStatR")) install.packages("BioStatR")
library(BioStatR)
if (!require("FactoMineR")) install.packages("FactoMineR")
library(FactoMineR)
if (!require("factoextra")) install.packages("factoextra")
library(factoextra)
if (!require("forcats")) install.packages("forcats")
library(forcats)
library(reshape2)
if (!require("mclust")) install.packages("mclust")
library(mclust)
if (!require("cluster")) install.packages("cluster")
library(cluster)
if (!require("ppclust")) install.packages("ppclust")
library(ppclust)
if (!require("circlize")) install.packages("circlize")
library(circlize)
if (!require("ggalluvial")) install.packages("ggalluvial")
library(ggalluvial)
if(!require("knitr")) install.package("knitr")
library(knitr)
DataBio = read.table("DataProjet3MIC-2425.txt", header=TRUE)
#affichage de la nature des variables du jeu de données
print("Table de la nature des différentes variables du jeu de données")
str(DataBio)
#mise en place des données qualitatives
DataBio$ExpT1 = as.factor(DataBio$ExpT1)
DataBio$ExpT2 = as.factor(DataBio$ExpT2)
DataBio$ExpT3 = as.factor(DataBio$ExpT3)
M_cor = cor(DataBio[1:36])
corrplot(M_cor, method="ellipse", tl.cex=0.4)
# Faire une Analyse Unidimensionnelle du jeu de données.
# On commence par l'analyse des variables Qualitatives
# Effectif :
ExpT <- DataBio[(c(37,38,39))]
effT1 <- table(DataBio$ExpT1)
effT2 <- table(DataBio$ExpT2)
effT3 <- table(DataBio$ExpT3)
#print(effT1)
#print(effT2)
#print(effT3)
# Fréquence :
freqT1<-data.frame(effT1=c(effT1),Freq=c(effT1)/sum(effT1))
freqT2<-data.frame(effT2=c(effT2),Freq=c(effT2)/sum(effT2))
freqT3<-data.frame(effT3=c(effT3),Freq=c(effT3)/sum(effT3))
#print(freqT1)
#print(freqT2)
#print(freqT3)
auxR1 = melt(DataBio[c(1:18)])
auxR2 = melt(DataBio[c(19:36)])
# GGplot des variables qualitatives (Exp T1,T2,T3)
g1 = ggplot(DataBio, aes(x = ExpT1)) + geom_bar(fill = "blue")
g2 = ggplot(DataBio, aes(x = ExpT2)) + geom_bar(fill = "green")
g3 = ggplot(DataBio, aes(x = ExpT3)) + geom_bar(fill = "red")
grid.arrange(g1, g2, g3, ncol=3)
# Pour les variables quantitatives
gR1 = ggplot(data=auxR1, aes(x=variable, y=value))+geom_boxplot()+ggtitle("Représentation en boxplot des traitements pour le réplicat 1")
gR2 = ggplot(data=auxR2, aes(x=variable, y=value))+geom_boxplot()+ggtitle("Représentation en boxplot des traitements pour le réplicat 2")
grid.arrange(gR1, gR2, nrow=2)
#print("T1 & T2")
#prop.table(table(ExpT$ExpT1, ExpT$ExpT2), margin=2)
g1 <- ggplot(DataBio, aes(fill=ExpT$ExpT1, x=ExpT$ExpT2))+geom_bar(position="fill")
#print("T1 & T3")
#prop.table(table(ExpT$ExpT1, ExpT$ExpT3), margin=2)
g2 <- ggplot(DataBio, aes(fill=ExpT$ExpT1, x=ExpT$ExpT3))+geom_bar(position="fill")
#print("T3 & T2")
#prop.table(table(ExpT$ExpT3, ExpT$ExpT2), margin=1)
g3 <- ggplot(DataBio, aes(x=ExpT$ExpT3, fill=ExpT$ExpT2))+geom_bar(position="fill")
grid.arrange(g1, g2, g3, ncol=3)
T1 <- DataBio[c(1:6, 19:24)]
T2 <- DataBio[c(7:12, 25:30)]
T3 <- DataBio[c(13:18, 31:36)]
Lt1_expt1 <- matrix(1:36, ncol=3)
rownames(Lt1_expt1) = c(paste(1:6,"H_R", 1, sep = ""), paste(1:6,"H_R", 2, sep = ""))
colnames(Lt1_expt1) = c(paste("Heure", sep = ""), paste("Replicat", sep = ""), paste("Liaison_T1ExpT1", sep = ""))
Lt2_expt2 <- matrix(1:36, ncol=3)
rownames(Lt2_expt2) = c(paste(1:6,"H_R", 1, sep = ""), paste(1:6,"H_R", 2, sep = ""))
colnames(Lt2_expt2) = c(paste("Heure", sep = ""), paste("Replicat", sep = ""), paste("Liaison_T2ExpT2", sep = ""))
Lt3_expt3 <- matrix(1:36, ncol=3)
rownames(Lt3_expt3) = c(paste(1:6,"H_R", 1, sep = ""), paste(1:6,"H_R", 2, sep = ""))
colnames(Lt3_expt3) = c(paste("Heure", sep = ""), paste("Replicat", sep = ""), paste("Liaison_T3ExpT3", sep = ""))
for (i in 1:12){
Lt1_expt1[i,3] = eta2(T1[,i], ExpT$ExpT1)
Lt2_expt2[i,3] = eta2(T2[,i], ExpT$ExpT2)
Lt3_expt3[i,3] = eta2(T3[,i], ExpT$ExpT3)
if (i<=6){
Lt1_expt1[i,1] = i
Lt2_expt2[i,1] = i
Lt3_expt3[i,1] = i
Lt1_expt1[i,2] = 1
Lt2_expt2[i,2] = 1
Lt3_expt3[i,2] = 1
} else {
Lt1_expt1[i,1] = i - 6
Lt2_expt2[i,1] = i - 6
Lt3_expt3[i,1] = i - 6
Lt1_expt1[i,2] = 2
Lt2_expt2[i,2] = 2
Lt3_expt3[i,2] = 2
}
}
Lt1_expt1 = data.frame(Lt1_expt1)
Lt2_expt2 = data.frame(Lt2_expt2)
Lt3_expt3 = data.frame(Lt3_expt3)
Lt1_expt1[,2] = as.factor(Lt1_expt1[,2])
Lt2_expt2[,2] = as.factor(Lt2_expt2[,2])
Lt3_expt3[,2] = as.factor(Lt3_expt3[,2])
g1 = ggplot(Lt1_expt1, aes(x=Heure, y=Liaison_T1ExpT1, colour=Replicat))+geom_line()
g2 = ggplot(Lt2_expt2, aes(x=Heure, y=Liaison_T2ExpT2, colour=Replicat))+geom_line()
g3 = ggplot(Lt3_expt3, aes(x=Heure, y=Liaison_T3ExpT3, colour=Replicat))+geom_line()
grid.arrange(g1, g2, g3, nrow=2)
corT1T2 = cor(T1, T2)
corT1T3 = cor(T1, T3)
corT2T3 = cor(T2, T3)
g1 = corrplot(corr = corT1T2, method="ellipse")
g2 = corrplot(corr = corT1T3, method="ellipse")
g3 = corrplot(corr = corT2T3, method="ellipse")
# A présent, on passe sur l'ACP. Ici, les variables quantitatives représentent les individus et les gènes représentent les variables.
# De ce fait, On fait la transposée pour avoir : les Tt_sH_Rr décrits par les gènes.
Tt_sH_Rr <- t(DataBio[c(1: 36)])
traitements2 <- rep(c(rep("T1", 6), rep("T2", 6), rep("T3", 6)), 2)
heures2 <- rep(c(rep("1H", 1), rep("2H", 1), rep("3H", 1),rep("4H", 1), rep("5H", 1), rep("6H", 1)), 6)
ACP_DataBio <- PCA(Tt_sH_Rr,  scale.unit = F, graph = F)
#ACP_DataBio$eig
g1 = fviz_eig(ACP_DataBio,addlabels = TRUE, ylim = c(0, 100), main = "Valeurs propres")
# Projections des individus
g2 = fviz_pca_ind(ACP_DataBio, geom = c("point"),col.ind = "cos2", habillage = as.factor(traitements2), repel = TRUE, title = "Projection des individus (Tt_sH_Rr)")
g3 = fviz_pca_ind(ACP_DataBio, geom = c("point"),col.ind = "cos2", habillage = as.factor(heures2), repel = TRUE, title = "Projection des individus (Tt_sH_Rr)")
# Graphes des variables
g4 = fviz_pca_var(ACP_DataBio,geom=c("point"),habillage=as.factor(DataBio$ExpT1))
g5 = fviz_pca_var(ACP_DataBio,geom=c("point"),habillage=as.factor(DataBio$ExpT2))
g6 = fviz_pca_var(ACP_DataBio,geom=c("point"),habillage=as.factor(DataBio$ExpT3))
grid.arrange(g1, g2, g3, nrow=2)
grid.arrange(g4, g5, g6, nrow=2)
# Maintenant que l'ACP a été effectuée, on fait un clustering des classes à l'aide de la méthode K-means.
# Avant de débuter le clustering avec la méthode K-means, il faut déterminer le nombre de classes.
set.seed(123)
Kmax<-20
reskmeanscl<-matrix(0,nrow=nrow(Tt_sH_Rr),ncol=Kmax)
Iintra<-NULL
for (k in 1:Kmax){
resaux<-kmeans(Tt_sH_Rr,centers=k)
reskmeanscl[,k]<-resaux$cluster
Iintra<-c(Iintra,resaux$tot.withinss) # tot.withinss correspond à la somme des composantes au carré des éléments du cluster par cluster
}
df<-data.frame(K=1:20,Iintra=Iintra)
g1 = ggplot(df,aes(x=K,y=Iintra))+
geom_line()+
geom_point()+
xlab("Nombre de classes")+
ylab("Inertie intraclasse")
# Avec cette méthode, on dirait que le coude correspond lorsque le nombre de classes est de 3.
# On va alors utiliser 3 classes pour la méthode des K-means.
reskmeans<-kmeans(Tt_sH_Rr,centers = 3)
g2 = fviz_cluster(reskmeans,data=Tt_sH_Rr,
ellipse.type="norm",labelsize=8,
geom=c("point"))+ggtitle("")
# A présent, on va essayer une autre méthode : la méthode hiérarchique.
# D'une part, on fait le calcul de la matrice de distances
dist_matrix <- dist(Tt_sH_Rr, method = "euclidean")
# Clustering hiérarchique avec la méthode de liaison "ward.D2", on peut aussi faire avec "single", "complete","average" ...
hc <- hclust(dist_matrix, method = "ward.D2")
# Afficher le dendrogramme
g3 = fviz_dend(hc,k=3,show_labels = FALSE,
rect = TRUE, rect_fill = TRUE,palette = "npg",
rect_border = "npg",
labels_track_height = 0.8)+ggtitle("")
grid.arrange(g1, g2, g3, nrow=2)
# A présent,on va essayer de construire la matrice DataExpMoy. C'est une matrice de taille G * 18. Le nombre de lignes correspond aux gènes et les colonnes correspondent aux moyennes de T1,T2,T3 pour chaque heure. On a alors :
# colonne 1 : moyenne(T1_1H_R1/2)
# colonne 2 : moyenne(T1_2H_R1/2)
# colonne 3 : moyenne(T1_3H_R1/2)
# colonne 4 : moyenne(T1_4H_R1/2)
# colonne 5 : moyenne(T1_5H_R1/2)
# colonne 6 : moyenne(T1_6H_R1/2)
# colonne 7 : moyenne(T2_1H_R1/2)
# colonne 8 : moyenne(T2_2H_R1/2)
# ...
# colonne 18 : moyenne(T3_6H_R1/2)
# On essaye de créer cette matrice :
cols_T1_R1 <- grep("^T1_.*_R1$", colnames(DataBio))  # T1 pour R1
cols_T1_R2 <- grep("^T1_.*_R2$", colnames(DataBio))  # T1 pour R2
cols_T2_R1 <- grep("^T2_.*_R1$", colnames(DataBio))  # T2 pour R1
cols_T2_R2 <- grep("^T2_.*_R2$", colnames(DataBio))  # T2 pour R2
cols_T3_R1 <- grep("^T3_.*_R1$", colnames(DataBio))  # T3 pour R1
cols_T3_R2 <- grep("^T3_.*_R2$", colnames(DataBio))  # T3 pour R2
# Moyenne pour T1
T1_means <- (DataBio[, cols_T1_R1] + DataBio[, cols_T1_R2]) / 2
# Moyenne pour T2
T2_means <- (DataBio[, cols_T2_R1] + DataBio[, cols_T2_R2]) / 2
# Moyenne pour T3
T3_means <- (DataBio[, cols_T3_R1] + DataBio[, cols_T3_R2]) / 2
MatriceDataExpMoy <- cbind(T1_means, T2_means, T3_means)
DataExpMoy <- as.data.frame(cbind(T1_means, T2_means, T3_means))
# Pour vérifier la taille
#dim(DataExpMoy)  # Devrait être 542 × 18 (c'est bon)
# On utilise T1 /T2 /T3 pour Identifier les gènes particulièrement influents pour un traitement spécifique.
# Ajouter les colonnes ExpT1, ExpT2, ExpT3 pour un filtrage
DataExpMoy_full <- cbind(MatriceDataExpMoy, ExpT1 = DataBio$ExpT1, ExpT2 = DataBio$ExpT2, ExpT3 = DataBio$ExpT3)
# Moyenne des gènes surexprimés pour T1 à 6 heures
mean_sur_T1_6H <- mean(DataExpMoy_full[DataExpMoy_full$ExpT1 == "Sur", "T1_6H"])
#print(mean_sur_T1_6H)
# On fait la ACP de ce nouveau jeu de données
ACP_DataExpMoy <- PCA(DataExpMoy,  scale.unit = F, graph = F)
ACP_DataExpMoy$eig
g1 = fviz_eig(ACP_DataExpMoy,addlabels = TRUE, ylim = c(0, 100), main = "Valeurs propres")
# Projection des DataExpMoy
g2 = fviz_pca_ind(ACP_DataExpMoy, geom = c("point"),col.ind = "cos2", gradient.cols = c("blue", "red"), repel = TRUE, title = "Projection des DataExpMoy")
grid.arrange(g1, g2, nrow=2)
# Projection des variables
fviz_pca_var(ACP_DataExpMoy, col.var = "contrib",
gradient.cols = c("blue", "red"), repel = TRUE,
title = "Combinaison Traitement/Heure")
# Maintenant que l'ACP a été effectuée, on fait un clustering des classes à l'aide de la méthode K-means.
# Avant de débuter le clustering avec la méthode K-means, il faut déterminer le nombre de classes.
set.seed(123)
Kmax<-15
reskmeanscl<-matrix(0,nrow=nrow(DataExpMoy),ncol=Kmax)
Iintra<-NULL
for (k in 2:Kmax){
resaux<-kmeans(DataExpMoy,centers=k)
reskmeanscl[,k]<-resaux$cluster
Iintra<-c(Iintra,resaux$tot.withinss) # tot.withinss correspond à la somme des composantes au carré des éléments du cluster par cluster
}
df<-data.frame(K=2:15,Iintra=Iintra)
g1 = ggplot(df,aes(x=K,y=Iintra))+
geom_line()+
geom_point()+
xlab("Nombre de classes")+
ylab("Inertie intraclasse")
# Avec cette méthode, on dirait que le coude correspond lorsque le nombre de classes est de 6.
# On va alors utiliser 6 classes pour la méthode des K-means.
ExpMoykmeans<-kmeans(DataExpMoy,centers = 6)
g2 = fviz_cluster(ExpMoykmeans,data=DataExpMoy,ellipse.type="norm",labelsize=8,geom=c("point"))+ggtitle("")
# A présent, on va essayer une autre méthode, la méthode hiérarchique.
# D'une part, on fait le calcul de la matrice de distances
dist_matrix_ExpMoy <- dist(DataExpMoy, method = "euclidean")
# Clustering hiérarchique avec la méthode de liaison "ward.D2", on peut aussi faire avec "single", "complete","average" ...
hc_ExpMoy <- hclust(dist_matrix_ExpMoy, method = "ward.D2")
grid.arrange(g1, g2, nrow=2)
# Afficher le dendrogramme
#fviz_dend(hc_ExpMoy,k=6,show_labels = FALSE, rect = TRUE, rect_fill = TRUE,palette = "npg", rect_border = "npg", labels_track_height = 0.8)+ggtitle("")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,37]))
g1 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT1"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,38]))
g2 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT2"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,39]))
g3 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT3"), expand = c(.05, .05))+
theme(legend.position = "none")
grid.arrange(g1,g2,g3,ncol=3)
#Alluvial Diagram
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
help(pam)
ClustExpT = pam(t(ExpT), 2, metric = c("euclidean"))
is.matrix(ExpT)
is.matrix(t(ExpT))
ClustExpT = pam(t(ExpT), 2, metric = c("euclidean"))
ClustExpT = pam(ExpT_data, 2, metric = c("euclidean"))
```{r ClustExpT, echo=F, fig.cap="\\label{fig:ClustExpT}Cluster des gènes à partir des variables ExpT", rename.level=TRUE}
head(t(ExpT))
head(ExpT_data)
ExpT_data = data.frame(t(ExpT))
head(ExpT_data)
ClustExpT = pam(ExpT_data, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
View(reskmeans)
View(ExpT_data)
ExpT_data = data.frame(t(ExpT))
for(i in 1:3){
for(j in 1:542){
ExpT_data[i,j]=as.factor(ExpT_data[i,j])
}
}
ClustExpT = pam(ExpT_data, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ExpT_data = data.frame(t(ExpT))
for(i in 1:3){
for(j in 1:542){
ExpT_data[i,j]=as.factor(ExpT_data[i,j])
}
}
str(ExpT_data)
ClustExpT = pam(ExpT_data, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
str(ExpT)
str(ExpT)
ExpT$ExpT1 = as.factor(ExpT$ExpT1)
ExpT$ExpT2 = as.factor(ExpT$ExpT2)
ExpT$ExpT3 = as.factor(ExpT$ExpT3)
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ExpT$ExpT1 = as.factor(ExpT$ExpT1)
ExpT$ExpT2 = as.factor(ExpT$ExpT2)
ExpT$ExpT3 = as.factor(ExpT$ExpT3)
str(ExpT)
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,37:39]))
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,ExpT))
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
#Tab<-melt(table(clust,DataBio[,37]))
Tab = melt(ExpT)
g1 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT1"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,38]))
g2 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT2"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,39]))
g3 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT3"), expand = c(.05, .05))+
theme(legend.position = "none")
grid.arrange(g1,g2,g3,ncol=3)
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,37]))
g1 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT1"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,38]))
g2 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT2"), expand = c(.05, .05))+
theme(legend.position = "none")
clust<-paste("DataExpMoy",ExpMoykmeans$cluster,sep="")
Tab<-melt(table(clust,DataBio[,39]))
g3 <- ggplot(Tab,aes(y=value,axis1=clust,axis2=Var2))+
geom_alluvium(aes(fill=clust))+
geom_stratum(width = 1/12)+
geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
scale_x_discrete(limits = c("DataExpMoy", "ExpT3"), expand = c(.05, .05))+
theme(legend.position = "none")
grid.arrange(g1,g2,g3,ncol=3)
#Alluvial Diagram
ClustExpT = pam(ExpT, 3, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 3, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
ClustExpT = pam(ExpT, 2, metric = c("euclidean"))
fviz_cluster(ClustExpT, data=ExpT, ellipse=TRUE, ellipse.type="convex", labelsize=8, geom=c("point")) + ggtitle("")
